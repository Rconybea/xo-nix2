# workflow to build XO projects
# using custom docker container;
# container provides nix support
#
# NOTES
# 1. GIT_TOKEN granted automatically by github.
#    has read permission on public resources + read/write permission on this repo
#
# 2. container built from [[https:github.com:rconybea/docker-nix-builder]]
#    Includes dependencies:
#    - compiler toolchain:  gcc, binutils, bash, etc
#    - git
#    - cmake
#    - catch2
#    - pybind11 + python
#    - libwebsockets
#    - jsoncpp
#

name: XO nix builder

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release

jobs:
  build_job:
    name: XO nix build on docker-nix-builder
    runs-on: ubuntu-latest
    container:
      # custom docker image. see github.com:rconybea/docker-nix-builder for definition
      image: ghcr.io/rconybea/docker-nix-builder:v1
    steps:
      # not using usual checkout actions:  they don't work out-of-the-box from within a container

    - name: xo-nix2
      run: |
        echo "::group::clone xo-nix2 repo"
        mkdir -p repo/xo-nix2
        GIT_SSL_NO_VERIFY=true git clone https://${{env.GIT_USER}}:${{env.GIT_TOKEN}}@github.com/rconybea/xo-nix2.git repo/xo-nix2
        echo "::endgroup"

        echo "::group::build xo-cmake with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-cmake && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-indentlog with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-indentlog && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-subsys with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-subsys && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-refcnt with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-refcnt && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-randomgen with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-randomgen && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-ordinaltree with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-ordinaltree && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-pyutil with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-pyutil && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-pyreflect with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-pyreflect && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-printjson with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-printjson && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-pyprintjson with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-pyprintjson && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-callback with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-callback && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-webutil with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-webutil && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-pywebutil with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-pywebutil && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-reactor with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-reactor && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-pyreactor with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-pyreactor && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-simulator with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-simulator && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-distribution with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-distribution && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-pydistribution with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-pydistribution && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-process with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-process && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-pyprocess with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-pyprocess && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-statistics with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-statistics && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-kalmanfilter with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-kalmanfilter && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-pykalmanfilter with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-pykalmanfilter && tree ./result)
        echo "::endgroup"

        echo "::group::build xo-userenv with nix"
        (cd repo/xo-nix2 && nix build -L --print-build-logs .#xo-userenv && tree ./result)
        echo "::endgroup"
